@using System.Xml.Linq
@model IEnumerable<Luncher.Web.Models.RestaurantResponse>
@{
    ViewData["Title"] = "Home Page";
}
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">

<!-- Dark Mode Styles -->
<style>
    body.dark-mode {
        background-color: #121212;
        color: #ffffff;
    }
    .dark-mode .text-center, .dark-mode div {
        background-color: #1e1e1e;
    }
    .dark-mode button {
        background-color: #333;
        color: #fff;
        border: 1px solid #fff;
    }
    
    .dark-mode button:hover {
        background-color: #555;
    }
    
    .dark-mode button:disabled {
        background-color: #222;
        color: #444;
    }
    
    .dark-mode .navbar-brand {
        color: #fff;
    }
    
    .dark-mode header {
        background-color: #333 !important;
    }
</style>

<button id="darkModeToggle" style="position: fixed; top: 10px; right: 10px;">🌙/☀️</button>

<div class="text-center">
    @{
        var dateNcOpen = "8.5.2025";
        var culture = new System.Globalization.CultureInfo("cs-CZ");
        var day = culture.DateTimeFormat.GetDayName(DateTime.Today.DayOfWeek);
        TimeZoneInfo cetTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time");
        DateTime utcNow = DateTime.UtcNow;
        DateTime cetNow = TimeZoneInfo.ConvertTimeFromUtc(utcNow, cetTimeZone);
        DateTime nextFriday = cetNow.Date.AddDays(5 - (int)cetNow.DayOfWeek).AddHours(15).AddMinutes(50);

        if (cetNow > nextFriday)
        {
            nextFriday = nextFriday.AddDays(7);
        }
        
        string apiUrl = "https://api.met.no/weatherapi/locationforecast/2.0/classic?lat=49.1894114&lon=16.6162686";
        
        using HttpClient client = new HttpClient();
        
        try
        {
            client.DefaultRequestHeaders.Add("User-Agent", "C# console program");
            client.DefaultRequestHeaders.Add("Accept", "application/xml");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        var response = await client.GetStringAsync(apiUrl);
        
        XDocument xml = XDocument.Parse(response);
        
        var product = xml.Descendants("product").FirstOrDefault();

        var times = product?.Descendants("time");
        
        var time = times?.Where(t => t.Attribute("from").Value.Contains("11:00:00"));
        
        var rainElement = time?.FirstOrDefault(t => t.Element("location")?.Element("precipitation") != null);

        var weather = new Weather();
        if (time != null)
        {
            var location = time.FirstOrDefault().Element("location");
            weather.Temperature = location?.Element("temperature")?.Attribute("value")?.Value;
            weather.WindSpeed = location?.Element("windSpeed")?.Attribute("mps")?.Value;
            weather.Humidity = location?.Element("humidity")?.Attribute("value")?.Value;
            weather.Cloudiness = location?.Element("cloudiness")?.Attribute("percent")?.Value;
            weather.Rain = rainElement?.Element("location")?.Element("precipitation")?.Attribute("value")?.Value+"mm";
            
            Console.WriteLine($"Weather at 11:00 AM CET:");
            Console.WriteLine($"Temperature: {weather.Temperature}°C");
            Console.WriteLine($"Wind Speed: {weather.WindSpeed} m/s");
            Console.WriteLine($"Humidity: {weather.Humidity}%");
            Console.WriteLine($"Cloudiness: {weather.Cloudiness}%");
            Console.WriteLine($"Rain: {weather.Rain} mm");
        }
        else
        {
            Console.WriteLine("No forecast available for 11:00 AM CET.");
        }

        var mostVotedRestaurant = Model.OrderByDescending(r => r.Votes).FirstOrDefault();
        
        var nameday = client.GetStringAsync("https://svatky.adresa.info/xml").Result;
        /*
         * <svatky>
           <svatek>
           <date>0303</date>
           <name>Kamil</name>
           </svatek>
           </svatky>
         */
        
        XDocument namedayXml = XDocument.Parse(nameday);
        var namedayElement = namedayXml.Descendants("svatek").Descendants("name").FirstOrDefault();
        var namedayName = namedayElement?.Value;
    }

    <h1 class="display-4">Dnes je @day</h1>
    @if (weather.Temperature != null)
    {
        <div>
            <div class="d-flex align-items-center justify-content-center">
                <img src="~/img/sun.png" alt="sun" class="me-3" style="width: 36px;" />
                <h2>Předpověď počasí na oběd</h2>
                <img src="~/img/cloud.png" alt="cloud" class="me-3" style="width: 36px; padding-left: 10px" />
            </div>
            <div>
                <span>Teplota: @weather.Temperature °C</span>
                <span>|</span>
                <span>Rychlost větru: @weather.WindSpeed m/s</span>
                <span>|</span>
                <span>Vlhkost: @weather.Humidity %</span>
                <span>|</span>
                <span>Zataženost: @weather.Cloudiness %</span>
                <span>|</span>
                <span>Srážky: @weather.Rain</span>
            </div>
        </div>
    }
    @if (!String.IsNullOrEmpty(namedayName))
    {
        <div class="d-flex align-items-center justify-content-center">
            <p>Svátek má @namedayName</p>
        </div>
    }
    <div class="d-flex align-items-center justify-content-center mt-4 gap-3">
        <img src="~/img/pivko.png" class="fas fa-beer" alt="beer" class="me-3" style="width: 48px;" />
        <h2 id="countdown" class="display-6"></h2>
    </div>
    <hr/>
</div>

<div>
    @foreach (var restaurant in Model)
    {
        @if (restaurant.Type == "NC")
        {
            var ncOpen = DateTime.Parse(dateNcOpen);
            var daysUntilNcOpen = (ncOpen - DateTime.Now).Days;
            var hoursUntilNcOpen = (ncOpen - DateTime.Now).Hours;
            if (daysUntilNcOpen > 0)
            {
                <div class="text-center">
                    <h3>Už jenom @daysUntilNcOpen dní a @hoursUntilNcOpen hodin</h3>
                </div>
            }
        }
        <div class="@restaurant.Type">
            @if (restaurant == mostVotedRestaurant && restaurant.Votes > 0)
            {
                <i class="fas fa-crown" style="color: gold; font-size: 1.5em;"></i>
            }
            <h2 style="display: inline-block">@restaurant.Name</h2>
            <span>| </span>
            <button class="vote-btn" style="display: inline-block;">Hlasuj</button>
            <span> |</span>
            <span class="votes" style="display: inline-block;font-weight: bold;">@restaurant.Votes</span>
            <br/>

            @if (!restaurant.Soaps.Any() && !restaurant.Meals.Any())
            {
                <div>Nenalezeno žádné menu</div>
            }
            else
            {
                <h5>Polévky</h5>
                <ul>
                    @foreach (var soap in restaurant.Soaps)
                    {
                        <li>@soap.Name</li>
                    }
                </ul>
                <br/>

                <h5>Hlavní</h5>
                <ul>
                    @foreach (var meal in restaurant.Meals)
                    {
                        <li>@meal.Name</li>
                    }
                </ul>
            }

            <hr/>
        </div>
    }
</div>
<div class="text-center text-muted" style="font-size: 0.3em; opacity: 50%">
    Používáním aplikace uživatel automaticky souhlasí s <a class="text-muted" href="/Home/TermsOfService">podmínkami užívání</a>.
</div>

<script>
    function formatDays(days) {
        if (days === 1) return "1 den";
        if (days >= 2 && days <= 4) return `${days} dny`;
        return `${days} dní`;
    }

    function formatHours(hours) {
        if (hours === 1) return "1 hodina";
        if (hours >= 2 && hours <= 4) return `${hours} hodiny`;
        return `${hours} hodin`;
    }

    function formatMinutes(minutes) {
        if (minutes === 1) return "1 minuta";
        if (minutes >= 2 && minutes <= 4) return `${minutes} minuty`;
        return `${minutes} minut`;
    }
    
    function formatSeconds(seconds) {
        if (seconds === 1) return "1 sekunda";
        if (seconds >= 2 && seconds <= 4) return `${seconds} sekundy`;
        return `${seconds} sekund`;
    }

    function startCountdown(targetTime) {
        function updateCountdown() {
            let now = new Date();
            let remainingTime = targetTime - now;
            
            if (remainingTime > 0) {
                let days = Math.floor(remainingTime / (1000 * 60 * 60 * 24));
                let hours = Math.floor((remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                let minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
                let seconds = Math.floor((remainingTime % (1000 * 60)) / 1000);

                document.getElementById("countdown").innerHTML =
                    `Už jenom ${formatDays(days)} ${formatHours(hours)} ${formatMinutes(minutes)} ${formatSeconds(seconds)}`;
            } else {
                document.getElementById("countdown").innerHTML = "Je čas na pivo!";
                clearInterval(interval);
            }
        }

        updateCountdown(); // Initial call to avoid delay
        let interval = setInterval(updateCountdown, 1000);
    }

    // Pass the calculated next Friday time from Razor to JavaScript
    let nextFriday = new Date("@nextFriday.ToString("yyyy-MM-ddTHH:mm:ss")");
    startCountdown(nextFriday);

    // Dark Mode Toggle
    const darkModeToggle = document.getElementById("darkModeToggle");
    const body = document.body;

    function toggleDarkMode() {
        body.classList.toggle("dark-mode");
        localStorage.setItem("darkMode", body.classList.contains("dark-mode") ? "enabled" : "disabled");
    }

    darkModeToggle.addEventListener("click", toggleDarkMode);

    // Check user preference
    if (localStorage.getItem("darkMode") === "enabled") {
        body.classList.add("dark-mode");
    }
</script>
